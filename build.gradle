/*
 * Copyright 2019 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

def snapshot = System.getProperty("snapshot", "true").toBoolean()
group = System.getProperty('group')
version = System.getProperty('version') + (snapshot ? '-SNAPSHOT' : '')

subprojects {
    ext.deps = [targetSdk : 29,
                compileSdk: 29,
                minSdk    : 19,
                junit     : '4.12',
                assertj   : '2.6.0',
                mockito2  : '3.0.0',
                androidx  : [
                        material  : '1.0.0',
                        annotation: '1.1.0',
                        test      : [
                                rules   : '1.2.0',
                                espresso: [
                                        core           : '3.2.0',
                                        idling_resource: '3.2.0'
                                ]
                        ]
                ]
    ]

    ext.compilerArgs = ["-Werror"]

    apply plugin: 'maven-publish'

    group = rootProject.group
    version = rootProject.version

    afterEvaluate {
        if (plugins.hasPlugin('java-library')) {
            sourceCompatibility = 1.8
            targetCompatibility = 1.8
        }

        if (plugins.hasPlugin('org.jetbrains.kotlin.android')) {
            android.kotlinOptions {
                jvmTarget = "1.8"
            }
        }

        if (plugins.hasPlugin('com.android.library')
                || plugins.hasPlugin('com.android.application')) {
            android {
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
            }
        }

        // from https://docs.gradle.org/current/userguide/publishing_maven.html
        if (plugins.hasPlugin('java-library')) {
            task sourcesJar(type: Jar){
                from sourceSets.main.allJava
                getArchiveClassifier().set('sources')
            }

            task javadocJar(type: Jar){
                from javadoc
                getArchiveClassifier().set('javadoc')
            }

            publishing {
                repositories {
                    maven {
                        // Use getenv so they can be passed in without having them in a file
                        // or in the command args
                        credentials {
                            username System.getenv('MAVEN_REPO_USERNAME') ?: ''
                            password System.getenv('MAVEN_REPO_PASSWORD') ?: ''
                        }

                        url System.getenv('MAVEN_REPO_URL')
                    }
                }
                publications {
                    // groupId and version come from gradle.properties
                    // artifactId comes from the name of the gradle module
                    busybee(MavenPublication) {
                        from components.java
                        artifact sourcesJar
                        artifact javadocJar
                    }
                }
            }
        }

        if (plugins.hasPlugin('com.android.library')) {
            task releaseSourcesJar(type: Jar) {
                getArchiveClassifier().set('sources')
                from android.sourceSets.release.java.srcDirs
            }

            artifacts {
                archives releaseSourcesJar
            }

            task androidSourcesJar(type: Jar) {
                from android.sourceSets.main.java.srcDirs
            }

            publishing {
                repositories {
                    maven {
                        // Use getenv so they can be passed in without having them in a file
                        // or in the command args
                        credentials {
                            username System.getenv('MAVEN_REPO_USERNAME') ?: ''
                            password System.getenv('MAVEN_REPO_PASSWORD') ?: ''
                        }

                        url System.getenv('MAVEN_REPO_URL')
                    }
                }
                publications {
                    // groupId and version come from gradle.properties
                    // artifactId comes from the name of the gradle module
                    busybee(MavenPublication) {
                        artifact("build/outputs/aar/${project.name}-release.aar")

                        artifact androidSourcesJar {
                            getArchiveClassifier().set('sources')
                        }

                        // Manually add the dependencies because the android plugin does not support SoftwareComponent
                        pom.withXml {
                            def dependenciesNode = asNode().appendNode('dependencies')

                            configurations.implementation.allDependencies.each {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)

                                if (it.group == group) {
                                    dependencyNode.appendNode('version', version)
                                } else {
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

